/*

Общие задачи:

1. Песочница.
2. Оформленная стартовая страница.
3. Википедия.

Песочница:
1. Сохранение и чтение миров.
1.1. Анимация ожидания базы.
1.2. Сериализация, сохранение и чтение мира.


1. Можно лайкать статьи. Можно утверждать их или удалять, если ты администратор.



Возможности растут по причинам:
1. Лучшего понимания как работать с автоматом.
2. Возможно получения ботов.
3. Запаса ресурсов, к которому можно вертуться после гибели.
4. Размера доступной области для оперирования.
5. Возможности оперировать большим числом ресурсов при наличии больших запасов (больше ботов, больше буфер клеток, больше буфер энергии).
6. Возможности выставлять больше клеток за один ход автомата.

Как это сбалансировать?

Простые планеты - с примитивной жизнью, где есть почти открытые ресурсы. Достаточно вскрывать и собирать. 
Опасные - где есть боты, активно атакующие большим числом клеток.

И того, получаем стратегию:
1. Нужно грести клетки, преодолевая защиту из клеток атакуя ее своими подвижными клетками.
2. Получив клетки можно апгрейдить зону доступа, буфер, скорость.
3. Нужно отбивать атаки активных противников и защитать хранилища от них.

Пошаговый или в реальном времени?

Есть минимальная скорость выполнения, медленнее которой ставить нельзя.
Ускорять можно.
Дальше, на момент атаки можно приостанавливать чтобы подумать и сделать несколько шагов.
Приостановки могут быть ограничены если это разные игроки.

Мри мультиплее можно грабить укрепления в отсутствии хозяина.
Пока на планете есть кто-то, войти на нее нельзя.

Непонятно как сбаллансировать захваты в космосе.

Кто-то строит эффективные укрепления для ресурсов.
Создаются накопления.
Накопления нужно защищать от животных, но это может быть не сложно из за однообразного поведения.
Дальше, кто-то может грабить укрепления.

Защита может быть в нескольких вариантах:
1. Стенки, которые невозможно преодолеть без достаточных ресурсов.
2. Укрепления, которые преодолевать дороже, чем внутри хранится ресурсов.
3. Активные укрепления, которые убивают игрока.

Захватив клетки игрок может преобразовать их в свои собственные укрепления.




Дальше, нужно предоставить другим игрокам возможность попробовать взломать эту защиту.
Дальше игрок может построить свои укрепления на этой планете.

Путешествуя можно находить укрепленные кем-то планеты преобразовывать их.
По своим укрепленным планетам можно видеть как их ломали и видеть результаты.
Отбор должен идти в направлении к самым эффективно защищенным планетам.


Какой UI нам нужен?

1. Нужно иметь возможность смотреть статьи.
Каждая статья - это текст и мир. Мир можно запускать с начала, мотать вперед и назад с любой скоростью.
Редактировать нельзя.
Дальше, есть поясняющий текст.
В тексте описывается где смотреть явление, как оно выглядит.
Текст в основном краткий.
Иногда это может быть целая теория, тогда текст длинный. 
В тексте можно ссылаться на конфигурации, тогда они показываются на экране.

Меню с выбором всегда с права на экране.
В меню будет страница содержания, случайная статья, новые статьи, не модерированные статьи, мои статьи.
Пояснение как работать.

На основной панели показывается статья с права и дальше - картинка.

Редактирование:
1. Можно создать статью. Тогда текст становится редактируемым, поле тоже.
В тексте разрешаются простые теги, в результате формируется html.
После сохранения сохраняется новая статья, которая актуализируются после модерации.
Редактировать чужие статьи нельзя. 

Как обеспечить авторство?
Статью можно пометить как авторское свидетельство. 

Автор может поменять статью, после чего она будет рассказывать про что-то другое.
Значит свидетельство менять после согласования нельзя.

Кто-то может еще раз описать то же самое, только лучше. Такие статьи нужно связывать вместе, как описывающие одно и то же.

Задача - я хочу собрать статьи и хочу чтобы кто-то помог. На этом все.

Статю можно модифицировать, но при этом будет утрачена метка времени - значит приоритет открытия можей уйти. 
Но всегда можно откатить на старый текст и восстановить приоритет.

Статьи можно лайкать, устанаввливая им приоритет при поиске.

Как искать:
1. Поиск по словам в заголовке.
2. Просмотр всех упорядоченных по времени.
3. Через страницу содержания.

Страницы не видны до модерации (выдны в отдельном разделе). 
С правами администратора можно пометить как отмодерированную или написать замечания к ней.

Поиск показывается в виде списка на там же экране. 
Список проматывается и можно выводить далее..

Как возвращаться на главную страницу непонятно. Можно использовать некую иконку в меню.


Сразу сохраняем как черновик, потом отправляем на модерирование.
Смодерированная - это версия.
После модерирования исправлять нельзя.
Можно создать новую статью а старую убрать в архив. Тогда на старую можно добавить ссылку в качестве доказательства своего авторства.
На архивную можно перейти из текущей версии.
Таким образом, связи не нужны.

Статусы:
Черновик -> На модерации -> Отклонена на модерации (то же что черновик) -> На модерации -> Утверждена -> Отправлена в архив.


Привязать автомат:
1. Режим просмотра - только кнопки промотки вперед, назад и ресет к началу. Загружается вместе с текстом.
2. Режим редактирования: функции редактирования, кнопки промотки вперед, назад. Останавливаться на нулевом шаге.

Ставим канвас. Дальше при переходе к статье нужно создать мир и привязать. 



Последовательно по замечаниям.

+1. Мои статьи - фильтр по автору.
+2. Скрывать поле автомата если автомат пустой для страниц содержания.
+3. Поиск по словам.
+4. Добавить ограничение размера статьи и поля.
+5. Кнопки промотки для автомата. Фабрика для разных контроллеров. Четные нечетные шаги при промотке.
+5.1. Возврат к исходному шагу и номер шага.
+6. Масштабирование и скроллинг.
+8. При попытке покинуть адрес - запрос подтверждения на выход из страницы.
7. Отделение админских прав и процесс модерации статьи.
8. Вставка тегов в редакторе статьи.
10. Страница содержания - при обновлении базы статья читается из файла json.
Файлы можно экспортировать и импортировать в браузере в режиме администратора. Результат сохраняем в файлах.
11. Получение случайной статьи - контроллер статей.
9. Постраничное чтение в поиске.
10. Разделить фунации редактирования и просмотра, счетчик кадров, установка нулевого состояния и возврат домой в простраснтве и масштабе.
14. Настоящая авторизация по почте.
12. Красивая стартовая страница с текстом.
13. Перенести диалоги в компоненты получше с правильной архитектурой передачи данных.
15. Подбирать некрасивые косяки по коду и архитектуре.
16. Перенести запросы в отдельные сервисы.
16. Верстка под мобильник?

+Увеличить скорость, сделать пропуски. 
+Прятать сетку.
+Ограничить масштаб вверх и вниз.
+Показывать номер шага.
+Сохранять состояние при выходе с состояния 1 если были изменения.
Добавить кнопки - ресет масштаба, рамку тиражирования, кнопка очитки всего после подтверждения.
Рамка ставиться, поставленная рамка переносится и меняет размер.
Для рамки включается режим захвата, копирования или тиражирования конфигураций.
Кнопки для рамки: выбор режима - захват, копирование, тиражирование, закрытие, закрытие.
Размер блокируется кроме режима тиражирования.
Кнопки пропадают во всех режимах. Остается кнопка закрытия и пометка действующего режима.



+1. Для статьи скрывать кноку редактирования, если это не статья текущего пользователя и не администратор.
1.1 Вместо нее показывать кнопки удаления и отправки в архив. 
1.2 Добавить диалоги подтверждения. 
1.3 Переходить куда-то после удаления.
2. Кнопки изменения статуса статей должны работать только для администратора. Активировать кнопки и контроллеры.
3. На сервере не принимается апдейт статьи если он не от админа или того же пользователя.
4. Пройти сценарии публикации и сохранения как черновика.
5. Статю можно отправить в архив, если ты автор или администратор. Архивные статьи видны автору или админу.
5.1. На архивную статью можно оставить ссылку из основной. 
5.2. Согласованную статью нельзя редактировать.
6. Доработать поиск для исключения архивных и черновиков, добавить дополнительные пукнты поиска для просмотра требующих модерации.
7. При создании базы нужно добавить статьи из ресурсов.
8. Нужно добавить экспорт статей в ресурс через браузер в режиме админа.
9. Нужна функция изменения пароля. Показываем диалог регистрации где можно поменять пароль своего пользователя, если ты тот самый пользователь.

10. Сделать отсылку письма при регистрации.
11. Добавить функцию "забыл пароль"




16. Начинаем страницу для гейплея: здесь предлагается начать новый мир, продолжить играть в существующем. Похоже на майнкрафт.
После начала пишет что геймплей еще не готов и показывает пустой канвас с игроком, который может управляться и ставить фигуры.
Дальнейшее - разработка геймлея.

После простейшей страницы 16 можно считать что проект готов.

Админские права:

В итоге можем наполнять базу статьями.

Кнопки промотки:
На шаг вперед, пуск автоматического, ускорение автоматического.
Стрелочка >| > >> при автоматическом превращается в стоп.
Кнопка возврата в начальное состояние и кнопка изменения направления времени.
Кнопка установки нулевого момента здесь с диалогом подтверждения.
В просмотре - все те же кнопки, кроме установки времени.
Счетчик времени (на канвас).

Палель нужно переиспользовать в режиме песочницы, редактирования и показа статьи.
В игровом режиме будет другая панель.

Для этого можно сделать компонент. 
Компонент будет вызывать методы контроллера управления выполеннием.
Контроллер поддерживает алгоритм выполнения и умеет работать с миром. 
У мира можно сделать интерфейс для управления временем.

Контроллер умеет работать с таймером.
У контроллера есть интерфейс для панели и он ей передается. 
Панель принимает интерфейс и реагирует на него.
Байдинг в данном случае не обязателен. 
Управляющий контроллер будет плоским объектом, значит к нему не нужно биндиться.


Компонент имеет в описании внешние события.
Интегрируя компонент мы пишем какие методы выполнять для событий и как получать состояния для обновления.
Этот код интеграции может быть сложным.

Как реализовывать сложную модель в ангуларе.
Внтури можно запустить сервис, формирующий мир и готовый его моделировать.
Сервис - это модель.
Представление должно обновляться при изменении этой модели.
Представление может просто читать нужные данные из модели при отображении.

Вопрос - ставит ли ангулар переменные под наблюдение.
Допустим, нет и они читаются только по мере перерисовки.
Тогда как-то должны испускаться события, свидетельствующие о необходиомсти перерс

Связываем кнопки, модель и экранную форму.
Для кнопок делаем отдельный компонент.
Компонент выдает события при нажатии кнопок и принимает состояния чтобы показывать информацию на кнопках.

Отдельно нужен контроллер выполнения, который будет оперировать с миром в ответ на события кнопок и обновлять кнопки.

Отдельно нужны компоненты мира, с алгоритмом расчета и связью с канвой.

Представление получает все источники данных, нужные ему для рисования.

Как связывать эти все компоенты?

Компоненты:
1. Представление для рисования. Имеет ссылки на канвас, данные о мире и о координатах.
2. Модель - мир.
3. Модель - окно просмотра.
4. Модель - параметры выполения.
5. Контроллер скроллинга и редактирования. Подписывается на события мыши или клавиатуры для канваса, меняет модели, учитывает модельо выполнения 
   (блокируется).
6. Панель с кнопками для управления. Генерирует события управления. 
7. Контроллер управлеиня - управляет временем выполенния.

CCanvas - компонент с канвасом для рисования криттеров, ищет рисовалку и передает ей канвас,
транслирует события в контроллер управления и редактирования.

Рисовалка - уже есть, имеет ссылку на модель рисования и мир, рисует на указанном канвас.
Перерисовывается получив событие от моделей об изменениях.

Модели- это мир, модель редактирования и модель времени выполения.
Модели сообщают об изменениях.
В модели можно вносить изменения.

Контроллер редактирования: 

Что созадется в корне?
В корневом элементе ставится элемент для канвас.
Элемент тянет за собой рисовалку, которой он должен передать канвас.
Рисовалка тянет за собой нужные ей модели. 
Канвас ищет кому отдавать мыши и создает под себя контроллеры.
Контроллер получает тот же мир что другие.
Компонент управления времем выполнения создает контроллер, который получает модель. 












И того, есть три модели.
Рисовалка использует их всех чтобы выводить картинку.
Два контроллера управляют разными двумя аспектами модели в ответ на события.
События канвас генерируются отдельным регистратором событий и попадают в контроллер.
События кнопок генерируются компонентом кнопок и передаются в контроллер.

Общий принцип сбора сервисов.
Есть корневой компонент, который создает визуальные элементы.
Дальше, визуальные элементы получают нужные им объекты для настройки на них.
Сервисы создаваясь в свою очередь получают компоненты, которые им нужны и собираются на них.

Как быть с моделями и контроллерами?
Допустим, для двух редакторов нужны две разные модели.

Они могут поддерживать одинаковые интерфейсы.

Преимущества от сборки из сервисов - все классы отдельно и не нужна фабрика их собирающая.



Варианты - плоский объект, компонент, сервис.

Компонент - это панель с кнопками.
Представление для рисования можно сделать компонентом, но большого смысла не видно.
Представление должно получить ссылки на все модели.
Контроллеры тоже
Значит не считая панель с кнопками все может быть плоскими объектами.
 
Панель с кнопками генерирует простые события.
События канваса можно напрямую отдавать контроллеру. Тогда контроллер будет уметь работать с канвасом.
Можно менять режимы для тачскрина. Это позволит избежать дополнительного уровня абстракции.

Если все сделать сервисами.
Панель с кнопками получит ссылку на контроллер управления и будет передавать ему события.
Тот же контроллер получит экранная форма.
Контроллер должен получит ссылку на модель с которой он работает.






11. Проверять совпадение паролей.
12. Ресурсы и локализация.
13. Все сценарии работы регистрации с неправильными действиями пользователей.
14. Реальная проверка почты пользователя.

15. Красивая заглавная страница и песочница.
16. Ограничение работы песочницы без авторизации.

На этом этапе можно создавать энциклопедию по автомату.

Следующий этап - геймплей.
Здесь от ангулара остается только несложные элементы интерфейса.
Основная проблема - алгоритмы генерации и редактирования миров, геймлей и прочее.
Опыт - здесь можно поработать над высоконагруженными приложениями, если рассчитывать на многопользовательскую игру.

Вопрос - кто узнает про эту игру.
Просто гуглом найти сложно.


Сбаллансированный геймплей

Первое - нужно формировать рельеф планеты.
Это должна быть форма с островами. Еще желательны пещеры.

Планета имеет форму, на планене есть недоступные области.

Ходим и собираем клетки.
За клетки расширяются возможности.

Клетки на карте могут быть защищены от поглощения.
На такие клетки нельзя наехать полем.
Такие клетки нужно обстреливать своими клетками, чтобы снять защиту.

В оболочке может быть меньше энергии чем нужно для прохода через оболочку. 
Тогда надо разрабатывать стратегию как проходить через оболочку.
Можно стрелять нейтральными клетками, тогда энергии требуется меньше и можно преодолевать большую защиту.

Для конфигураций может сущестовать способ их выгодного разбора, но для этого может требоваться широкое поле и много клеток. 
Или нужно найти способ.

Активная защита - когда система может взрываться при попытке ее разобрать.
Такая защита возможна только при наличии непроницаемых стенок.
Допустим, мы разрешим ставить такие стенки. Тогда будет слишком много возможностей по защите.

Опасные мобы - запрограммировать будет сложно. Могут двигаться, атоковать планерами, собирать ресурсы и таскать их в склады. 
Атоквать все одновременно.
Свои боты - аналогично, но действующие в интересах игрока.

Путешествие через космос. 
В космосе уменьшается весь ресурс.
Поэтому для путешествия нужна большая область.
Кроме того, чем больше расстояние, тем большего размера должна быть конструкция.
Таким образом задача - вывести в космос больше клеток.
При этом, не всегда можно развернуть такой корабль в космосе.
В космосе могут быть метеориты, разрушающие корабль.

И того, игра начинается с необходимости разбирать и поглощать ресурсы, затем строить собственные хранилища ресурсов. 
Хранилища не обязательно защищать для начала.

Возможны простые мобы. Они будут поглощать не защищенные ресурсы. Тогда ресурсы надо минимально огораживать. 
Возможны мобы, которые умеют стрелять планерами и затем пытаться поглотить ресурсы. Такием мобы потребуют более сложной защиты.
Наконец, на планету могут зайти другие игроки и разобрать хранилище.

Собрав достаточно ресурсов можно организовывать переезд на другую планету.
Для этого с собой нужно взять достаточно клеток.

По прибытию клетки будтут полезны в качестве начального запаса энергии, чтобы не начинать все с начала. 
Например, чтобы разобрать хорошо защищенную конструкцию нужна энергия. Если привезти ее с собой, этого может быть достаточно для начала.

Базовый набор планет можно сгенерировать автоматичеси. Они могут быть скучными.

Баланс с чужими планетами:


Получил предельный уровень можно окупировать всю свою ветку вселенной и дальше можно экспериментировать с мобами, наблюдая как они 
развиваются на разных планетах. У мобов может быть интеллект. 
При этом задача статносится другой - построить самые впечатляющие миры со сложными экосистемами, в которых будет увлекательно играть другим.

Схема с параллельными мирами.
Планеты генерируются автоматически, но можно по разному их заселить.

При попадании на планету игрок попадает в свою версию, если он уже там был.
Если не был - в одну из случайно выбранных версий.

Планета на которую однажны попал больше не меняется.
Новая планета может быть выбрана из числа кем-то защищенных.
Если все начинают в одной точке, то защита планет будет похожей.
Т.е. приходиться перемещаться на планету, которую кто-то со сходным уровнем защитил.
Дальше, нужна мотивация для защиты планет.

Если кто-то погиб на планете, считаем что он ограбил ее не успешно.

Мультиплеер - позволяет в реальном времени находиться на планетах одновременно. 

Модели могут оповещать об изменении.



Защита - могут работать триггеры, которые открывают выход атакующим планерам.

Собранные ресурсы нужно паковать в защищенные хранилища.
Хранилища увеличивают возможности.

Как выбраться в космос?


Геймплей для начала.

При переходе в игру предлагается или создать новый мир или продолжить играть в сохраненном.
Экраны - выбор мира, создание мира - запрашивается имя.

Для начала для каждого игрока можно создавать один новый мир. 

Когда мир создан, можно перемещаться и играть. 

Игра происходит на планете. При сохранении достаточно сохранить состояние планеты.
Частое автосохранение пока невозможно из за нагрузки на сервер. Сохранение происходит локально в браузере.

Как играть:
Перемещаемся в реальном времени клавишами управления.
Можно указать направление мышкой, тогда идет в приоритетную сторону.
В каждый момент точка повернута в определенную сторону.
В эту сторону генерируется комбинация.

Клавиша отвечает за выбранную для нее комбинацию.
Таким образом можно ставить комбинации из активного списка.

Можно подготовить варианты списков и менять их.

Игра работает в реальном времени на стандартной скорости.

На карте разбрасываем конфигурации для сбора.

Рисуем планету. Нужно ходить по карте и собирать конфигурации для прокачки возможностей.
Это можно сбалансировать.

Перемещение на следующую планету довольно трудно запрограммировать.
Проще просто сделать выбор на карте куда переместиться.

Планета перестает моделироваться при определенном отдалении от нее.
Эту границу можно нарисовать - как глубокий космос.
При выходе в него переносятся точки из космоса, но пропадает планета.

Дальше летим до входа на следующую планету.

Начальная версия может быть с одним миром и без ботов.

Возможно без ботов будет совсем плохо и они таки понадобятся.

Создание мира - предлагается ввести имя. Кнопка создания. Пока никаких опций.
Загрузка мира - показывается список существующих миров для этого пользователя, можно загрузить.
Здесь же можно удалить мир или переименовать его.

Созданный мир - это расширенные данные с учетом данных о планете (ее границы), рельефе,
принадлежности клеток, текущих параметров игрока.
Панель крафтинга хранится отдельно для игрока и формируется во время игры.
Игрок может использовать список текущих конфигураций, создавать сколько угодно списков и переключаться между списками.

Реализация редактора списков потребует много компонентов, это больша работа.

Для игры нужно реализовать поведение с клеткой игрока, скроллинг экрана, поведение доступной области.
Дальше, нужна функция поглощения с вычислением энергии.
Поглощение разреженных требует энергии, поглощение сгущенных позволяет накапливать энергию.
Показывается количество точек и энергии.

На поле нужно нарисовать стартовую конфигурацию. Для этого нужен редактор.
Можно переводить игру в режим редактирования и дать возможность сохранять и читать мир. 
Так можно нарисовать и скопировать конфигурации на карте. Потом игрок должен пытаться разобрать эти конфигурации.

Нужна стратегия перекрашивания клеток. 
Когда клетка сталкивается с чужой клеткой, они меняются цветами на время.
Чем больше конфигурация, тем дольше она сохраняет цвет.
Таким образом, стрелять выгоднее с расстояния, чтобы забрать отраженный планер обратно но в этом случае трудно добежать и забрать клетку.

Как стрелять друг в друга: выгодно поставить точку чтобы отразить. Не выгодно стрелять болшими конфигурациями.
Другой вариант - не перекрашивать свежую испущенную конфигурацию. Через какое-то время она должна терять способ окрашивать, но в первые моменты может.
Тогда атаковать своей конфигурацией всегда выгодно.

Коллективная игра - скорее может быть интересной.
Требует большой нагрузки на сервер так как сервер может тоже моделировать работу автомата.

Можно собирать комнаты из желающих поисоревноваться в захвате ресурсов в одной комнате.

Возможно ли реализовать мультиплеер?

Есть поток событий - создание клеток. Каждое вмешательство проводится на неком шаге может быть применено к миру. 
В мир попадает поток событий на каждом шаге и мир моделируется. 
Дальше, на каждом шаге нужно ожидать событий от других игроков и моделировать из тоже.
Если они приходят синхронно, то проблем нет. Если от кого-то не долши, нужно ждать.
События идут на сервер, сервер оповещает всех когда собрал полный пакет.
Выглядит не очень сложно. 

Простая оптимизация - если игрок не ответил в установленное время, его возмущение будет обработано в следующий ход.
Таким образом он видит лаг в управлении но не в отображении.

Значит можно начать с мультиплеера. 

1. Сделать управление игроком с установкой конфигураций и каким-то вариантом перекрашивания. При этом можно переключаться с одного 
	игрока на другого и так рисовать мир. Еще нужен режим креатива когда можно ставить конфигурации в любое место.
2. Добавить на сервер синхронизатор, который позволит передавать потоки событий и играть параллельно.
С этого момента можно развивать до полноценной игры против друг друга на заранее подготовленной карте.

Придется добавлять алгоритм вычисления энергии поглощаемых клеток. Это вроде не сложно.
Кроме того, нужен алгоритм взазимодействия, когда клетки перекрашиваются.

Как должна работать перекраска?

Задача - поглотить чужие конфигурации и перекрасить противника.

Клетки могут быть нейтральными.

Нейтральные наверно можно просто поглощать не перекрашивая.

Заприваченые поглощать нельзя.
Поле не должно растространяться за заприваченные, чтобы нельзя было ставить клетки рядом с заприваченными разрушая их.

При этом приватность должна как-то быть разрушаемой.

Нужно вынудить игроков концентрировать клетки для получения возможностей.
Концентрированные клетки выгодно поглощать для получения энергии.

Правила должны делать интересными два сценария - штурм хранилища и перестрелка.

Штурм хранилища в лоб должен быть возможен но не всегда выгоден.

Допустим, при столкновении двух заприваченных конструкций побежает конструкция большего размера. 
Одинаковые не меняются. Не пойдет, потому что не получится поглотить кучу взаимодействующих клеток.

Простая модель - заприваченные клетки становятся нейтральными при возмущении.
Тогда разреженную защиту можно довольно быстро преодолеть, но не так быстро как плотные конфигурации.

Нейтральные конфигурации можно поглощать, но требуется остановиться и нужно время для поглощения.



Но при реализации коллективных игр можно привлечь игроков, создавая комнаты.



При регистрации нужно отправлять письмо, показывать в диалоге что письмо отправлено. 


Начинаем писать управление героем.

1. Можно создавать миры.
Созданный мир в начале приватный для одного игрока.
2. Можно создать комнату для совместной игры. Для комнаты указывается один из приватных миров.
3. Миры можно удалять. Количество одновременных миров ограничено для одного игрока.
4. В мир можно войти и играть. 

Нужно сбалансировать правила для одиночной игры. 
Затем нужно научиться генерировать карты из конфигураций, нарисованных в режиме креатива.

Сиглплеер без мобов не факт что возможен. 
Можно сделать примитивных мобов, которые просто ползают и мешают, разрушая хранилища.
Хранилище придется защищать или остреливать мобов.


Пока можно сделать основной единственный мир.
Мир сохраняется по областям - планетам.
Всегда входим в него.
Его можно перегенирировать.

Можно делать интерфейс для игры.
Можно бегать по полю мышкой, при большом мастабе переходит на карту с планетами.
Панель управления позволяет ставить конфигурации.
Панель раскладывается и позволяет перемещать конфигурации или выбирать колонку.
На кажду позицию можно назначить кнопку.
Выбранная конфигурация ставится и убирается как-то.

Отдельно рисуются показатели игрока: энергия, размер поля, количество клеток в буфере, количество приваченной энергии.

Как управлять.

1. Можно нарисовать что угодно в поле, даже если движемся.
2. Нарисованные конфигурации можно актуализировать (отдельная кнопка).
3. Можно выбрать конфигурацию из библиотеки и тогда нарисованная очищается.
4. Можно поместить нарисованную конфигурацию в библиотеку.
5. У юнита есть направление относительно которого ставится конфигурация. Можно развернуть юнит на ходу и так стрелять в бок.
   Стрелки разворачивают юнит. При этом конфигурация может автоматически удаляться и очищаться при развороте или нет.
   Конфигурация может существовать только пока кнопка нажата или все время.




Мерцает автомат на медленном компе.

Восстановление пароля:
1. Отправить ссылку на страницу восстановления пароля.
Доступ к странице можно получить зная Uid. На странице предлагается ввести новый пароль, он возвращается в форму.

Как будет работать панель.
1. Нужно прочитать справочник конфигураций для этого пользвоателя.
Каждая конфигурация имеет уникальную позицию в сетке, набор координат клеток и признаки.

2. При загрузке нужно прочитать конфигурации игрока в отдельную модель.
Эта модель показывается панелью Панель - отдельный компонент.
У панели есть модель показа для текущего выбора. Панель рендерится в зависимости от этой модели.

По клику панель создает событие. События слушает контроллер игры, внося изменения в мир.

Игровая модель должна быть наследована для включения игрока.
Игровой контроллер должен быть написан для обработки событий и внесения изменний в игру.

Итерации разработки:

1. Модель для панелей в базе.
2. Модель для панелей на клиенте.
3. Компонент, показывающий панель.
4. Игровая модель с точкой игроков.
5. Представление с точками игроков и полем.
6. Добавление конфигурации по клику на панели.
7. Модель и правила для редактирования в пределах панели.

Последовательность:
Есть три части:
1. Модель - какая информация ведется.
2. Модель на клиенте - отражает модель в базе.
3. Компонеты отображения.
4. Контроллеры.

В камом порядке писать?
Удобнее всего по функциям.
Итерация первая:
Некие данные по доске в базе.
Данные по игровому миру по планетам.
Контроллер возвращает планету на которой находится этот игрок из указанного мира.
Данные по игроку в базе.
Точка игрока в модели. 
Отображение панели с конфигурациями и игрока.

1. Описать общую архитектуру - набор компонентов.
2. По каждому компонетну писать то, что очевидно как сделать.
3. Запустить какую-то задачу, которая уже может работать.

Общая архитектура:
1. Модель для хранения мира. Клетки, клетки игроков, параметры игроков.
2. Контроллер для чтения области в которой находится указанный игрок.
3. Процедура чтения планеты с контроллера.
4. Процедура для сохранения измененной планеты.
5. Рисовалка с учетом геймплея.
6. Контроллер области для гейплея.
7. Модель для описания библиотеки игрока (страницы, ряды, колонки).
8. Контроллер для загрузки библиотеки.
9. Процедура чтения библиотеки.
10. Модель библиотеки.
11. Компонент для рисования библиотеки.
12. Компоент для рисования состояния игрока.
13. Обработка событий от компоента библиотеки.

Модель для мира:
1. Область (планета или космос).
2. Игрок.
3. Мир - игроки и области.

Область:
Описание занимаемых фигур (квадратов).
Массив клеток.
Игроки вяжутся к каким-то клеткам.

Игрок:
координаты клетки, 
направление;
Энергия, количество клеток в буфере.
Размер поля, размер буфера, размер буфера энергии.
Количество одновременно выстаыляемых клеток.

Мир - название, игроки, планеты.



*/
