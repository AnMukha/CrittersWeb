/*

Общие задачи:

1. Песочница.
2. Оформленная стартовая страница.
3. Википедия.

Песочница:
1. Сохранение и чтение миров.
1.1. Анимация ожидания базы.
1.2. Сериализация, сохранение и чтение мира.


Сериализация:
Мир есть в массивах. Нужно упаковать его в бинарный массив или строку и отправить на сервер в теле запроса.
Первая проблема - сериализация.
Как лучше сериализовать объекты в js?

Вариант 1: делаем json.
Координаты клеток придется паковать в виде чисел с именами - слишком много данных.
Экономнее - записать в строку в виде чисел или сериализовать бинарные данные непосредственно.
Можно перобразовать в массив строк. Тогда имена не понадобятся. 

Модель для сохранения: получаем список моделей с именами и слотами при сохранении.
Модель для чтения - аналогично.
При сохранении мира отправляем на сервер мир уже с данными - это пара - модель для сохранения + данные мира.
Данные мира - это просто массив.
Для мира потребуется так же позиция и масштаб. Для этого к данными мира можно приложить еще данные view.


2. Добавить авторизацию пользователей. 
3. Сохранение миров с учетом авторизации.
4. Полноценное масштабирование миров. 

Стартовая страница:
Добавить какое-то описание, сделать фон в виде развивающегося автомата.

Википедия:
1. Возможность просмотра и добавления статей с созданными мирами.
Мир редактируется так же как в песочнице.
2. Можно лайкать статьи. Можно утверждать их или удалять, если ты администратор.

Создание задач:
1. Рисуем задачу поле для ее выполения.
Если задача признана удачной, она попадает в миссии.

Миссии:
Упорядоченные неким образом задачи, решая которые можно прокачиваться.

Перспективы:
Полноценный гейм-плей с персонажем, учетом энергии и цикличности.
Можно обойтись без платформ и переносить точки внутри персонажа.
Освоение космоса - запуск большого количества материи и торможении ее на новой платформе, где можно снова заняться захватом точек.
Через космос можно идти только пустым. 




Авторизация:
1. При попытке сохранения или чтения идет перенаправление на страницу авторизации.
Значит нужно добавить путь, который будет рендерить эту страницу на главной странице.
Дальше, нужно разработать эту страницу.
На странице авторизации есть ссылка на регистрацию.
На странице регистрации предлагается ввести почтовый ящик и пароль два раза.
Затем сервер высылает письмо и показывается снова страница авторизации.
Сервер запоминает не активированного пользователя. Пользователь активируется если письмо подтверждено или удаляется через некоторое время.
Когда пользователь кликает письмо, пользователь активируется передаваемым кодом. Дальше можно логиниться.
Это все можно сделать добавив авторизацию только в EF, потому что регистрация идет без авторизации.

2. На сервере нужно включить какой-то вариант авторизации. Форма авторизации выводится каждый раз при необходимости.
Компонент авторизации можно показывать на отдельной странице.


Вариант - обойтись без редиректа.
Тога дужен компонент с диалогом.
Этот диалог можно встраивать в код страницы с которой нужна авторизация.
Другой вариант - использовать библиотеки ангулара для встраивания диалогов.

На странице можно выделить место для диалогов. Диалоги будут срендерены в это мето.
Дальше, это место можно сделать видимым в зависимости от того какой диалог нужно показать.

Можно ли вставить диалог в страницу динамически? 
Диалог работает со своими данными. После того как он отработал нужно получить данные из него.
И того, нужно:
1. Динамически вставить компонент диалога в страницу (или активировать и показать).
2. Получить из диалога сообщение что он закрывается.

Вопросы:
1. Как организовать диалог так, чтобы он открылся.
2. Как динамически встроить нужный диалог (или нужны все?)


Еще раз по общему построению сайта:
1. Нужна входная страница, где можно авторизоваться и получить описание.
На ней работает автомат и выводится текст в котором описано что это за автомат.
2. Переходим в песочницу. Здесь простые кнопки.
3. Переходим в википедию - здесь страницы.
4. Переходим в игру - здесь находится игровое меню, из которого можно создать новый мир и так далее. В этот пункт можно переходить только с регистрацией.

В чем будет заключаться игра в минимальном варианте?
Можно ввести мелкие миры, в которых нужно выжить и достичь определенных результатов.
Другой вариант - бесконечный открытый мир для завоевания и обустройства.
Обосновываемся в одном мире, собираем достаточно ресурсов, устраняем все опасности.
Дальше, собираем ресурсы для путешествия через космос. В космос нужно выгнать много планеров, по прилету их надо остановить.
Это будет начальный набор ресурсов. Дальше нужно начинать освоение.
Цели:
1. Вскрывать существующие хранилища ресурсов.
2. Можно организовать растительный сбор ресурсов.
3. Нужно конкурировать с другими активными формами, которые могут все разрушить.

Возможности растут по причинам:
1. Лучшего понимания как работать с автоматом.
2. Возможно получения ботов.
3. Запаса ресурсов, к которому можно вертуться после гибели.
4. Размера доступной области для оперирования.
5. Возможности оперировать большим числом ресурсов при наличии больших запасов (больше ботов, больше буфер клеток, больше буфер энергии).
6. Возможности выставлять больше клеток за один ход автомата.


Как это сбалансировать?

Простые планеты - с примитивной жизнью, где есть почти открытые ресурсы. Достаточно вскрывать и собирать. 
Опасные - где есть боты, активно атакующие большим числом клеток.

И того, получаем стратегию:
1. Нужно грести клетки, преодолевая защиту из клеток атакуя ее своими подвижными клетками.
2. Получив клетки можно апгрейдить зону доступа, буфер, скорость.
3. Нужно отбивать атаки активных противников и защитать хранилища от них.

Пошаговый или в реальном времени?

Есть минимальная скорость выполнения, медленнее которой ставить нельзя.
Ускорять можно.
Дальше, на момент атаки можно приостанавливать чтобы подумать и сделать несколько шагов.
Приостановки могут быть ограничены если это разные игроки.

Мри мультиплее можно грабить укрепления в отсутствии хозяина.
Пока на планете есть кто-то, войти на нее нельзя.

Непонятно как сбаллансировать захваты в космосе.

Кто-то строит эффективные укрепления для ресурсов.
Создаются накопления.
Накопления нужно защищать от животных, но это может быть не сложно из за однообразного поведения.
Дальше, кто-то может грабить укрепления.




Защита может быть в нескольких вариантах:
1. Стенки, которые невозможно преодолеть без достаточных ресурсов.
2. Укрепления, которые преодолевать дороже, чем внутри хранится ресурсов.
3. Активные укрепления, которые убивают игрока.

Захватив клетки игрок может преобразовать их в свои собственные укрепления.



Дальше, нужно предоставить другим игрокам возможность попробовать взломать эту защиту.
Дальше игрок может построить свои укрепления на этой планете.

Путешествуя можно находить укрепленные кем-то планеты преобразовывать их.
По своим укрепленным планетам можно видеть как их ломали и видеть результаты.
Отбор должен идти в направлении к самым эффективно защищенным планетам.


Для программирования можно начать с википедии и самому ее заполнить.

Какой UI нам нужен?

1. Нужно иметь возможность смотреть статьи.
Каждая статья - это текст и мир. Мир можно запускать с начала, мотать вперед и назад с любой скоростью.
Редактировать нельзя.
Дальше, есть поясняющий текст.
В тексте описывается где смотреть явление, как оно выглядит.
Текст в основном краткий.
Иногда это может быть целая теория, тогда текст длинный. 
В тексте можно ссылаться на конфигурации, тогда они показываются на экране.

Меню с выбором всегда с права на экране.
В меню будет страница содержания, случайная статья, новые статьи, не модерированные статьи, мои статьи.
Пояснение как работать.

На основной панели показывается статья с права и дальше - картинка.

Редактирование:
1. Можно создать статью. Тогда текст становится редактируемым, поле тоже.
В тексте разрешаются простые теги, в результате формируется html.
После сохранения сохраняется новая статья, которая актуализируются после модерации.
Редактировать чужие статьи нельзя. 

Как обеспечить авторство?
Статью можно пометить как авторское свидетельство. 

Автор может поменять статью, после чего она будет рассказывать про что-то другое.
Значит свидетельство менять после согласования нельзя.

Кто-то может еще раз описать то же самое, только лучше. Такие статьи нужно связывать вместе, как описывающие одно и то же.

Задача - я хочу собрать статьи и хочу чтобы кто-то помог. На этом все.

Статю можно модифицировать, но при этом будет утрачена метка времени - значит приоритет открытия можей уйти. 
Но всегда можно откатить на старый текст и восстановить приоритет.

Статьи можно лайкать, устанаввливая им приоритет при поиске.

Как искать:
1. Поиск по словам в заголовке.
2. Просмотр всех упорядоченных по времени.
3. Через страницу содержания.

Страницы не видны до модерации (выдны в отдельном разделе). 
С правами администратора можно пометить как отмодерированную или написать замечания к ней.

Поиск показывается в виде списка на там же экране. 
Список проматывается и можно выводить далее..

Как возвращаться на главную страницу непонятно. Можно использовать некую иконку в меню.

И того, мы можем сделать верстку:
Панель меню, строка поиска с логином и кнопкой домой, список найденных, компонент для страницы.
Создание статьи в компоненте редактирования, сохранение после редактирования.
Кнопка модерации - можно дописать замечание.

Страницу можно разделить или можно картинку ставить под текстом.

Мотивация - создадим описание автомата.

Можно потом решить вопрос как добавить идексацию гуглом.


Последовательность разработки:
1. Верстка - делим страницу на части с условным контентом.
2. Компоненты - роутинг к компонентам для редактирования и просмотра статей.
3. Модель данных - добавляем в модель стати с атрибутами и историей версий статьи.
4. Отображение статьи по адресу.
5. Отображение найденного по запросу списка статей.
6. Редактирование и сохранение статьи.

Как оформить компоненты?

Запрашивается и показывается статья по Id.
Для показа статьи нужно добавить компонент показа статьи в основной области.

Запрос идет с указанием строки запроса в URL.
Есть вариант пустого запроса и запроса всех.

Компоненты:
Для отображения статьи.
Внутри: постоянный редактор, настроенный для википедии другой вариант - собрать отдельно.
Компонент должен достать параметры из маршрута и запросить то что ему нужно.

Компонент для отображения списка.





*/