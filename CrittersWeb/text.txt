/*

Общие задачи:

1. Песочница.
2. Оформленная стартовая страница.
3. Википедия.

Песочница:
1. Сохранение и чтение миров.
1.1. Анимация ожидания базы.
1.2. Сериализация, сохранение и чтение мира.


Сериализация:
Мир есть в массивах. Нужно упаковать его в бинарный массив или строку и отправить на сервер в теле запроса.
Первая проблема - сериализация.
Как лучше сериализовать объекты в js?

Вариант 1: делаем json.
Координаты клеток придется паковать в виде чисел с именами - слишком много данных.
Экономнее - записать в строку в виде чисел или сериализовать бинарные данные непосредственно.
Можно перобразовать в массив строк. Тогда имена не понадобятся. 

Модель для сохранения: получаем список моделей с именами и слотами при сохранении.
Модель для чтения - аналогично.
При сохранении мира отправляем на сервер мир уже с данными - это пара - модель для сохранения + данные мира.
Данные мира - это просто массив.
Для мира потребуется так же позиция и масштаб. Для этого к данными мира можно приложить еще данные view.


2. Добавить авторизацию пользователей. 
3. Сохранение миров с учетом авторизации.
4. Полноценное масштабирование миров. 

Стартовая страница:
Добавить какое-то описание, сделать фон в виде развивающегося автомата.

Википедия:
1. Возможность просмотра и добавления статей с созданными мирами.
Мир редактируется так же как в песочнице.
2. Можно лайкать статьи. Можно утверждать их или удалять, если ты администратор.

Создание задач:
1. Рисуем задачу поле для ее выполения.
Если задача признана удачной, она попадает в миссии.

Миссии:
Упорядоченные неким образом задачи, решая которые можно прокачиваться.

Перспективы:
Полноценный гейм-плей с персонажем, учетом энергии и цикличности.
Можно обойтись без платформ и переносить точки внутри персонажа.
Освоение космоса - запуск большого количества материи и торможении ее на новой платформе, где можно снова заняться захватом точек.
Через космос можно идти только пустым. 




Авторизация:
1. При попытке сохранения или чтения идет перенаправление на страницу авторизации.
Значит нужно добавить путь, который будет рендерить эту страницу на главной странице.
Дальше, нужно разработать эту страницу.
На странице авторизации есть ссылка на регистрацию.
На странице регистрации предлагается ввести почтовый ящик и пароль два раза.
Затем сервер высылает письмо и показывается снова страница авторизации.
Сервер запоминает не активированного пользователя. Пользователь активируется если письмо подтверждено или удаляется через некоторое время.
Когда пользователь кликает письмо, пользователь активируется передаваемым кодом. Дальше можно логиниться.
Это все можно сделать добавив авторизацию только в EF, потому что регистрация идет без авторизации.

2. На сервере нужно включить какой-то вариант авторизации. Форма авторизации выводится каждый раз при необходимости.
Компонент авторизации можно показывать на отдельной странице.


Вариант - обойтись без редиректа.
Тога дужен компонент с диалогом.
Этот диалог можно встраивать в код страницы с которой нужна авторизация.
Другой вариант - использовать библиотеки ангулара для встраивания диалогов.

На странице можно выделить место для диалогов. Диалоги будут срендерены в это мето.
Дальше, это место можно сделать видимым в зависимости от того какой диалог нужно показать.

Можно ли вставить диалог в страницу динамически? 
Диалог работает со своими данными. После того как он отработал нужно получить данные из него.
И того, нужно:
1. Динамически вставить компонент диалога в страницу (или активировать и показать).
2. Получить из диалога сообщение что он закрывается.

Вопросы:
1. Как организовать диалог так, чтобы он открылся.
2. Как динамически встроить нужный диалог (или нужны все?)
3. 


*/